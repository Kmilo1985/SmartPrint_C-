//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Datos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EntitiesSmartPrint : DbContext
    {
        public EntitiesSmartPrint()
            : base("name=EntitiesSmartPrint")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Cliente> Cliente { get; set; }
        public virtual DbSet<Empleado> Empleado { get; set; }
        public virtual DbSet<Factura> Factura { get; set; }
        public virtual DbSet<OrdenServicio> OrdenServicio { get; set; }
        public virtual DbSet<OtrosServicios> OtrosServicios { get; set; }
        public virtual DbSet<Proveedores> Proveedores { get; set; }
        public virtual DbSet<Remisión> Remisión { get; set; }
        public virtual DbSet<RemisionOtroServicios> RemisionOtroServicios { get; set; }
        public virtual DbSet<RemisionServicos> RemisionServicos { get; set; }
        public virtual DbSet<Servicios> Servicios { get; set; }
        public virtual DbSet<Usuarios> Usuarios { get; set; }
    
        public virtual ObjectResult<string> BuscarCliente(Nullable<long> cedula_Cliente)
        {
            var cedula_ClienteParameter = cedula_Cliente.HasValue ?
                new ObjectParameter("Cedula_Cliente", cedula_Cliente) :
                new ObjectParameter("Cedula_Cliente", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("BuscarCliente", cedula_ClienteParameter);
        }
    
        public virtual ObjectResult<string> BuscarEmpleado(Nullable<long> cedula_Empleado)
        {
            var cedula_EmpleadoParameter = cedula_Empleado.HasValue ?
                new ObjectParameter("Cedula_Empleado", cedula_Empleado) :
                new ObjectParameter("Cedula_Empleado", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("BuscarEmpleado", cedula_EmpleadoParameter);
        }
    
        public virtual ObjectResult<string> BuscarProveedor(Nullable<long> nIT_Provedores)
        {
            var nIT_ProvedoresParameter = nIT_Provedores.HasValue ?
                new ObjectParameter("NIT_Provedores", nIT_Provedores) :
                new ObjectParameter("NIT_Provedores", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("BuscarProveedor", nIT_ProvedoresParameter);
        }
    
        public virtual ObjectResult<Loguin_Result> Loguin(string usuario, string contrasena)
        {
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("Contrasena", contrasena) :
                new ObjectParameter("Contrasena", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Loguin_Result>("Loguin", usuarioParameter, contrasenaParameter);
        }
    
        public virtual ObjectResult<string> ModificarCliente(string cedula, string nombre, string apellido, string telefono, Nullable<int> ext, string celular, string fax, string direccion, string email, string observaciones, string habilitar)
        {
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var extParameter = ext.HasValue ?
                new ObjectParameter("ext", ext) :
                new ObjectParameter("ext", typeof(int));
    
            var celularParameter = celular != null ?
                new ObjectParameter("Celular", celular) :
                new ObjectParameter("Celular", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("fax", fax) :
                new ObjectParameter("fax", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var observacionesParameter = observaciones != null ?
                new ObjectParameter("observaciones", observaciones) :
                new ObjectParameter("observaciones", typeof(string));
    
            var habilitarParameter = habilitar != null ?
                new ObjectParameter("Habilitar", habilitar) :
                new ObjectParameter("Habilitar", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ModificarCliente", cedulaParameter, nombreParameter, apellidoParameter, telefonoParameter, extParameter, celularParameter, faxParameter, direccionParameter, emailParameter, observacionesParameter, habilitarParameter);
        }
    
        public virtual ObjectResult<string> ModificarEmpleado(string cedula, string primerNombre, string segundoNombre, string primerApellido, string segundoApellido, string telefono, string celular, string direccion, string email, string sexo, Nullable<System.DateTime> fechadeNacimiento, string cargo, Nullable<System.DateTime> fechadeIngreso, string disponibilidad, Nullable<System.DateTime> fechadeRetiro, string observaciones, string estado)
        {
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var primerNombreParameter = primerNombre != null ?
                new ObjectParameter("primerNombre", primerNombre) :
                new ObjectParameter("primerNombre", typeof(string));
    
            var segundoNombreParameter = segundoNombre != null ?
                new ObjectParameter("segundoNombre", segundoNombre) :
                new ObjectParameter("segundoNombre", typeof(string));
    
            var primerApellidoParameter = primerApellido != null ?
                new ObjectParameter("primerApellido", primerApellido) :
                new ObjectParameter("primerApellido", typeof(string));
    
            var segundoApellidoParameter = segundoApellido != null ?
                new ObjectParameter("segundoApellido", segundoApellido) :
                new ObjectParameter("segundoApellido", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var celularParameter = celular != null ?
                new ObjectParameter("celular", celular) :
                new ObjectParameter("celular", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var sexoParameter = sexo != null ?
                new ObjectParameter("sexo", sexo) :
                new ObjectParameter("sexo", typeof(string));
    
            var fechadeNacimientoParameter = fechadeNacimiento.HasValue ?
                new ObjectParameter("fechadeNacimiento", fechadeNacimiento) :
                new ObjectParameter("fechadeNacimiento", typeof(System.DateTime));
    
            var cargoParameter = cargo != null ?
                new ObjectParameter("cargo", cargo) :
                new ObjectParameter("cargo", typeof(string));
    
            var fechadeIngresoParameter = fechadeIngreso.HasValue ?
                new ObjectParameter("fechadeIngreso", fechadeIngreso) :
                new ObjectParameter("fechadeIngreso", typeof(System.DateTime));
    
            var disponibilidadParameter = disponibilidad != null ?
                new ObjectParameter("disponibilidad", disponibilidad) :
                new ObjectParameter("disponibilidad", typeof(string));
    
            var fechadeRetiroParameter = fechadeRetiro.HasValue ?
                new ObjectParameter("fechadeRetiro", fechadeRetiro) :
                new ObjectParameter("fechadeRetiro", typeof(System.DateTime));
    
            var observacionesParameter = observaciones != null ?
                new ObjectParameter("observaciones", observaciones) :
                new ObjectParameter("observaciones", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ModificarEmpleado", cedulaParameter, primerNombreParameter, segundoNombreParameter, primerApellidoParameter, segundoApellidoParameter, telefonoParameter, celularParameter, direccionParameter, emailParameter, sexoParameter, fechadeNacimientoParameter, cargoParameter, fechadeIngresoParameter, disponibilidadParameter, fechadeRetiroParameter, observacionesParameter, estadoParameter);
        }
    
        public virtual ObjectResult<string> ModificarProveedor(string nIT, string razonSocial, string contacto, string direccion, string telefono, Nullable<int> ext, string fax, string celular, string email, string observaciones, string habilitar)
        {
            var nITParameter = nIT != null ?
                new ObjectParameter("NIT", nIT) :
                new ObjectParameter("NIT", typeof(string));
    
            var razonSocialParameter = razonSocial != null ?
                new ObjectParameter("RazonSocial", razonSocial) :
                new ObjectParameter("RazonSocial", typeof(string));
    
            var contactoParameter = contacto != null ?
                new ObjectParameter("Contacto", contacto) :
                new ObjectParameter("Contacto", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var extParameter = ext.HasValue ?
                new ObjectParameter("ext", ext) :
                new ObjectParameter("ext", typeof(int));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var celularParameter = celular != null ?
                new ObjectParameter("Celular", celular) :
                new ObjectParameter("Celular", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var observacionesParameter = observaciones != null ?
                new ObjectParameter("observaciones", observaciones) :
                new ObjectParameter("observaciones", typeof(string));
    
            var habilitarParameter = habilitar != null ?
                new ObjectParameter("habilitar", habilitar) :
                new ObjectParameter("habilitar", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ModificarProveedor", nITParameter, razonSocialParameter, contactoParameter, direccionParameter, telefonoParameter, extParameter, faxParameter, celularParameter, emailParameter, observacionesParameter, habilitarParameter);
        }
    
        public virtual ObjectResult<string> RegistrarCliente(string cedula, string nombre, string apellido, string telefono, Nullable<int> ext, string celular, string fax, string direccion, string email, string observaciones, string habilitar)
        {
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var extParameter = ext.HasValue ?
                new ObjectParameter("Ext", ext) :
                new ObjectParameter("Ext", typeof(int));
    
            var celularParameter = celular != null ?
                new ObjectParameter("Celular", celular) :
                new ObjectParameter("Celular", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("fax", fax) :
                new ObjectParameter("fax", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var observacionesParameter = observaciones != null ?
                new ObjectParameter("observaciones", observaciones) :
                new ObjectParameter("observaciones", typeof(string));
    
            var habilitarParameter = habilitar != null ?
                new ObjectParameter("Habilitar", habilitar) :
                new ObjectParameter("Habilitar", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("RegistrarCliente", cedulaParameter, nombreParameter, apellidoParameter, telefonoParameter, extParameter, celularParameter, faxParameter, direccionParameter, emailParameter, observacionesParameter, habilitarParameter);
        }
    
        public virtual ObjectResult<string> RegistrarEmpleado(string cedula, string primerNombre, string segundoNombre, string primerApellido, string segundoApellido, string telefono, string celular, string direccion, string email, string sexo, Nullable<System.DateTime> fechadeNacimiento, string cargo, Nullable<System.DateTime> fechadeIngreso, string disponibilidad, Nullable<System.DateTime> fechadeRetiro, string observaciones, string estado)
        {
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var primerNombreParameter = primerNombre != null ?
                new ObjectParameter("primerNombre", primerNombre) :
                new ObjectParameter("primerNombre", typeof(string));
    
            var segundoNombreParameter = segundoNombre != null ?
                new ObjectParameter("segundoNombre", segundoNombre) :
                new ObjectParameter("segundoNombre", typeof(string));
    
            var primerApellidoParameter = primerApellido != null ?
                new ObjectParameter("primerApellido", primerApellido) :
                new ObjectParameter("primerApellido", typeof(string));
    
            var segundoApellidoParameter = segundoApellido != null ?
                new ObjectParameter("segundoApellido", segundoApellido) :
                new ObjectParameter("segundoApellido", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var celularParameter = celular != null ?
                new ObjectParameter("celular", celular) :
                new ObjectParameter("celular", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var sexoParameter = sexo != null ?
                new ObjectParameter("sexo", sexo) :
                new ObjectParameter("sexo", typeof(string));
    
            var fechadeNacimientoParameter = fechadeNacimiento.HasValue ?
                new ObjectParameter("fechadeNacimiento", fechadeNacimiento) :
                new ObjectParameter("fechadeNacimiento", typeof(System.DateTime));
    
            var cargoParameter = cargo != null ?
                new ObjectParameter("cargo", cargo) :
                new ObjectParameter("cargo", typeof(string));
    
            var fechadeIngresoParameter = fechadeIngreso.HasValue ?
                new ObjectParameter("fechadeIngreso", fechadeIngreso) :
                new ObjectParameter("fechadeIngreso", typeof(System.DateTime));
    
            var disponibilidadParameter = disponibilidad != null ?
                new ObjectParameter("disponibilidad", disponibilidad) :
                new ObjectParameter("disponibilidad", typeof(string));
    
            var fechadeRetiroParameter = fechadeRetiro.HasValue ?
                new ObjectParameter("fechadeRetiro", fechadeRetiro) :
                new ObjectParameter("fechadeRetiro", typeof(System.DateTime));
    
            var observacionesParameter = observaciones != null ?
                new ObjectParameter("observaciones", observaciones) :
                new ObjectParameter("observaciones", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("RegistrarEmpleado", cedulaParameter, primerNombreParameter, segundoNombreParameter, primerApellidoParameter, segundoApellidoParameter, telefonoParameter, celularParameter, direccionParameter, emailParameter, sexoParameter, fechadeNacimientoParameter, cargoParameter, fechadeIngresoParameter, disponibilidadParameter, fechadeRetiroParameter, observacionesParameter, estadoParameter);
        }
    
        public virtual ObjectResult<string> RegistrarProveedor(string nIT, string razonSocial, string contacto, string direccion, string telefono, Nullable<int> ext, string fax, string celular, string email, string observaciones, string habilitar)
        {
            var nITParameter = nIT != null ?
                new ObjectParameter("NIT", nIT) :
                new ObjectParameter("NIT", typeof(string));
    
            var razonSocialParameter = razonSocial != null ?
                new ObjectParameter("RazonSocial", razonSocial) :
                new ObjectParameter("RazonSocial", typeof(string));
    
            var contactoParameter = contacto != null ?
                new ObjectParameter("Contacto", contacto) :
                new ObjectParameter("Contacto", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var extParameter = ext.HasValue ?
                new ObjectParameter("ext", ext) :
                new ObjectParameter("ext", typeof(int));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var celularParameter = celular != null ?
                new ObjectParameter("Celular", celular) :
                new ObjectParameter("Celular", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var observacionesParameter = observaciones != null ?
                new ObjectParameter("observaciones", observaciones) :
                new ObjectParameter("observaciones", typeof(string));
    
            var habilitarParameter = habilitar != null ?
                new ObjectParameter("habilitar", habilitar) :
                new ObjectParameter("habilitar", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("RegistrarProveedor", nITParameter, razonSocialParameter, contactoParameter, direccionParameter, telefonoParameter, extParameter, faxParameter, celularParameter, emailParameter, observacionesParameter, habilitarParameter);
        }
    }
}
