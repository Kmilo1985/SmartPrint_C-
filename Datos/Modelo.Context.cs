//------------------------------------------------------------------------------
// <auto-generated>
//    Este código se generó a partir de una plantilla.
//
//    Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//    Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Datos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class SmartPrintEntities : DbContext
    {
        public SmartPrintEntities()
            : base("name=SmartPrintEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<OtrosServicios> OtrosServicios { get; set; }
        public DbSet<Proveedores> Proveedores { get; set; }
        public DbSet<Remision> Remision { get; set; }
        public DbSet<RemisionServicos> RemisionServicos { get; set; }
        public DbSet<Servicios> Servicios { get; set; }
        public DbSet<Usuarios> Usuarios { get; set; }
        public DbSet<MostrarComboProveedor> MostrarComboProveedor { get; set; }
        public DbSet<VistaOtrosServicios> VistaOtrosServicios { get; set; }
        public DbSet<VistaServicios> VistaServicios { get; set; }
        public DbSet<Empleado> Empleado { get; set; }
        public DbSet<Cliente> Cliente { get; set; }
        public DbSet<OrdenServicio> OrdenServicio { get; set; }
        public DbSet<Factura> Factura { get; set; }
        public DbSet<VistaMora> VistaMora { get; set; }
        public DbSet<VistaEmpleados> VistaEmpleados { get; set; }
        public DbSet<VistaUsuarios> VistaUsuarios { get; set; }
        public DbSet<Dian> Dian { get; set; }
    
        public virtual ObjectResult<string> BuscarUsuario(string cedulaEmpleado)
        {
            var cedulaEmpleadoParameter = cedulaEmpleado != null ?
                new ObjectParameter("CedulaEmpleado", cedulaEmpleado) :
                new ObjectParameter("CedulaEmpleado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("BuscarUsuario", cedulaEmpleadoParameter);
        }
    
        public virtual ObjectResult<string> GestionarOtrosServicio(Nullable<int> codigo, string idProveedor, string nombre, string observaciones, string serial, Nullable<double> valorUnitario, string usuario)
        {
            var codigoParameter = codigo.HasValue ?
                new ObjectParameter("Codigo", codigo) :
                new ObjectParameter("Codigo", typeof(int));
    
            var idProveedorParameter = idProveedor != null ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var observacionesParameter = observaciones != null ?
                new ObjectParameter("Observaciones", observaciones) :
                new ObjectParameter("Observaciones", typeof(string));
    
            var serialParameter = serial != null ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(string));
    
            var valorUnitarioParameter = valorUnitario.HasValue ?
                new ObjectParameter("ValorUnitario", valorUnitario) :
                new ObjectParameter("ValorUnitario", typeof(double));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GestionarOtrosServicio", codigoParameter, idProveedorParameter, nombreParameter, observacionesParameter, serialParameter, valorUnitarioParameter, usuarioParameter);
        }
    
        public virtual ObjectResult<string> GestionarProveedor(string nIT, string razonSocial, string contacto, string direccion, string telefono, Nullable<int> ext, string fax, string celular, string email, string observaciones, string habilitar, string usuario)
        {
            var nITParameter = nIT != null ?
                new ObjectParameter("NIT", nIT) :
                new ObjectParameter("NIT", typeof(string));
    
            var razonSocialParameter = razonSocial != null ?
                new ObjectParameter("RazonSocial", razonSocial) :
                new ObjectParameter("RazonSocial", typeof(string));
    
            var contactoParameter = contacto != null ?
                new ObjectParameter("Contacto", contacto) :
                new ObjectParameter("Contacto", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var extParameter = ext.HasValue ?
                new ObjectParameter("ext", ext) :
                new ObjectParameter("ext", typeof(int));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var celularParameter = celular != null ?
                new ObjectParameter("Celular", celular) :
                new ObjectParameter("Celular", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var observacionesParameter = observaciones != null ?
                new ObjectParameter("observaciones", observaciones) :
                new ObjectParameter("observaciones", typeof(string));
    
            var habilitarParameter = habilitar != null ?
                new ObjectParameter("habilitar", habilitar) :
                new ObjectParameter("habilitar", typeof(string));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GestionarProveedor", nITParameter, razonSocialParameter, contactoParameter, direccionParameter, telefonoParameter, extParameter, faxParameter, celularParameter, emailParameter, observacionesParameter, habilitarParameter, usuarioParameter);
        }
    
        public virtual ObjectResult<string> GestionarServicio(string nombre, string tipo, Nullable<int> item, string observaciones, Nullable<double> valorUnitario, string usuario)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var itemParameter = item.HasValue ?
                new ObjectParameter("Item", item) :
                new ObjectParameter("Item", typeof(int));
    
            var observacionesParameter = observaciones != null ?
                new ObjectParameter("Observaciones", observaciones) :
                new ObjectParameter("Observaciones", typeof(string));
    
            var valorUnitarioParameter = valorUnitario.HasValue ?
                new ObjectParameter("ValorUnitario", valorUnitario) :
                new ObjectParameter("ValorUnitario", typeof(double));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GestionarServicio", nombreParameter, tipoParameter, itemParameter, observacionesParameter, valorUnitarioParameter, usuarioParameter);
        }
    
        public virtual ObjectResult<string> ModificarUsuarios(string cedulaEmpleado, string usuario, string contrasena, string perfil, string estado)
        {
            var cedulaEmpleadoParameter = cedulaEmpleado != null ?
                new ObjectParameter("CedulaEmpleado", cedulaEmpleado) :
                new ObjectParameter("CedulaEmpleado", typeof(string));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("Contrasena", contrasena) :
                new ObjectParameter("Contrasena", typeof(string));
    
            var perfilParameter = perfil != null ?
                new ObjectParameter("Perfil", perfil) :
                new ObjectParameter("Perfil", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ModificarUsuarios", cedulaEmpleadoParameter, usuarioParameter, contrasenaParameter, perfilParameter, estadoParameter);
        }
    
        public virtual ObjectResult<ObtenerOtroServicio_Result> ObtenerOtroServicio()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerOtroServicio_Result>("ObtenerOtroServicio");
        }
    
        public virtual ObjectResult<ObtenerServicios_Result> ObtenerServicios()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerServicios_Result>("ObtenerServicios");
        }
    
        public virtual ObjectResult<string> RegistrarOrden(Nullable<int> numeroOrden, Nullable<int> numeroRemision, string cedula, string asignado, Nullable<System.DateTime> fechaOrden, string estado, string observaciones, string usuario)
        {
            var numeroOrdenParameter = numeroOrden.HasValue ?
                new ObjectParameter("NumeroOrden", numeroOrden) :
                new ObjectParameter("NumeroOrden", typeof(int));
    
            var numeroRemisionParameter = numeroRemision.HasValue ?
                new ObjectParameter("NumeroRemision", numeroRemision) :
                new ObjectParameter("NumeroRemision", typeof(int));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(string));
    
            var asignadoParameter = asignado != null ?
                new ObjectParameter("Asignado", asignado) :
                new ObjectParameter("Asignado", typeof(string));
    
            var fechaOrdenParameter = fechaOrden.HasValue ?
                new ObjectParameter("FechaOrden", fechaOrden) :
                new ObjectParameter("FechaOrden", typeof(System.DateTime));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            var observacionesParameter = observaciones != null ?
                new ObjectParameter("Observaciones", observaciones) :
                new ObjectParameter("Observaciones", typeof(string));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("RegistrarOrden", numeroOrdenParameter, numeroRemisionParameter, cedulaParameter, asignadoParameter, fechaOrdenParameter, estadoParameter, observacionesParameter, usuarioParameter);
        }
    
        public virtual int RegistrarRemisionServicios(Nullable<int> numeroRemision, Nullable<int> item, Nullable<int> cantidad, Nullable<int> valorUnitario, Nullable<double> valorTotal, string nombre)
        {
            var numeroRemisionParameter = numeroRemision.HasValue ?
                new ObjectParameter("NumeroRemision", numeroRemision) :
                new ObjectParameter("NumeroRemision", typeof(int));
    
            var itemParameter = item.HasValue ?
                new ObjectParameter("Item", item) :
                new ObjectParameter("Item", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var valorUnitarioParameter = valorUnitario.HasValue ?
                new ObjectParameter("ValorUnitario", valorUnitario) :
                new ObjectParameter("ValorUnitario", typeof(int));
    
            var valorTotalParameter = valorTotal.HasValue ?
                new ObjectParameter("ValorTotal", valorTotal) :
                new ObjectParameter("ValorTotal", typeof(double));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegistrarRemisionServicios", numeroRemisionParameter, itemParameter, cantidadParameter, valorUnitarioParameter, valorTotalParameter, nombreParameter);
        }
    
        public virtual ObjectResult<string> RegistrarUsuario(string cedulaEmpleado, string usuario, string contrasena, string perfil, string estado)
        {
            var cedulaEmpleadoParameter = cedulaEmpleado != null ?
                new ObjectParameter("CedulaEmpleado", cedulaEmpleado) :
                new ObjectParameter("CedulaEmpleado", typeof(string));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("Contrasena", contrasena) :
                new ObjectParameter("Contrasena", typeof(string));
    
            var perfilParameter = perfil != null ?
                new ObjectParameter("Perfil", perfil) :
                new ObjectParameter("Perfil", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("RegistrarUsuario", cedulaEmpleadoParameter, usuarioParameter, contrasenaParameter, perfilParameter, estadoParameter);
        }
    
        public virtual ObjectResult<BuscarServicio_Result1> BuscarServicio(Nullable<int> item)
        {
            var itemParameter = item.HasValue ?
                new ObjectParameter("Item", item) :
                new ObjectParameter("Item", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BuscarServicio_Result1>("BuscarServicio", itemParameter);
        }
    
        public virtual ObjectResult<string> GestionarUsuarios(string cedulaEmpleado, string usuario, string contrasena, string perfil, string estado, string creador)
        {
            var cedulaEmpleadoParameter = cedulaEmpleado != null ?
                new ObjectParameter("CedulaEmpleado", cedulaEmpleado) :
                new ObjectParameter("CedulaEmpleado", typeof(string));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("Contrasena", contrasena) :
                new ObjectParameter("Contrasena", typeof(string));
    
            var perfilParameter = perfil != null ?
                new ObjectParameter("Perfil", perfil) :
                new ObjectParameter("Perfil", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            var creadorParameter = creador != null ?
                new ObjectParameter("Creador", creador) :
                new ObjectParameter("Creador", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GestionarUsuarios", cedulaEmpleadoParameter, usuarioParameter, contrasenaParameter, perfilParameter, estadoParameter, creadorParameter);
        }
    
        public virtual ObjectResult<BuscarServicioFactura_Result> BuscarServicioFactura(Nullable<int> numeroOrden)
        {
            var numeroOrdenParameter = numeroOrden.HasValue ?
                new ObjectParameter("NumeroOrden", numeroOrden) :
                new ObjectParameter("NumeroOrden", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BuscarServicioFactura_Result>("BuscarServicioFactura", numeroOrdenParameter);
        }
    
        public virtual ObjectResult<SpBuscar_RemisionServicios_Result> SpBuscar_RemisionServicios(Nullable<int> numeroRemision)
        {
            var numeroRemisionParameter = numeroRemision.HasValue ?
                new ObjectParameter("NumeroRemision", numeroRemision) :
                new ObjectParameter("NumeroRemision", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpBuscar_RemisionServicios_Result>("SpBuscar_RemisionServicios", numeroRemisionParameter);
        }
    
        public virtual ObjectResult<string> GestionarCliente(string cedula, string nombre, string telefono, Nullable<int> ext, string celular, string fax, string direccion, string email, string observaciones, string habilitar, string usuario, string contacto)
        {
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var extParameter = ext.HasValue ?
                new ObjectParameter("ext", ext) :
                new ObjectParameter("ext", typeof(int));
    
            var celularParameter = celular != null ?
                new ObjectParameter("Celular", celular) :
                new ObjectParameter("Celular", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("fax", fax) :
                new ObjectParameter("fax", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var observacionesParameter = observaciones != null ?
                new ObjectParameter("observaciones", observaciones) :
                new ObjectParameter("observaciones", typeof(string));
    
            var habilitarParameter = habilitar != null ?
                new ObjectParameter("Habilitar", habilitar) :
                new ObjectParameter("Habilitar", typeof(string));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            var contactoParameter = contacto != null ?
                new ObjectParameter("Contacto", contacto) :
                new ObjectParameter("Contacto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GestionarCliente", cedulaParameter, nombreParameter, telefonoParameter, extParameter, celularParameter, faxParameter, direccionParameter, emailParameter, observacionesParameter, habilitarParameter, usuarioParameter, contactoParameter);
        }
    
        public virtual ObjectResult<string> GestionarEmpleado(string cedula, string primerNombre, string segundoNombre, string primerApellido, string segundoApellido, string telefono, string celular, string direccion, string email, string sexo, Nullable<System.DateTime> fechadeNacimiento, string cargo, Nullable<System.DateTime> fechadeIngreso, string disponibilidad, Nullable<System.DateTime> fechadeRetiro, string observaciones, string estado, string contrato, Nullable<double> salario, string eps, string compensaciones, string pensiones, string aRP, string usuario)
        {
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var primerNombreParameter = primerNombre != null ?
                new ObjectParameter("primerNombre", primerNombre) :
                new ObjectParameter("primerNombre", typeof(string));
    
            var segundoNombreParameter = segundoNombre != null ?
                new ObjectParameter("segundoNombre", segundoNombre) :
                new ObjectParameter("segundoNombre", typeof(string));
    
            var primerApellidoParameter = primerApellido != null ?
                new ObjectParameter("primerApellido", primerApellido) :
                new ObjectParameter("primerApellido", typeof(string));
    
            var segundoApellidoParameter = segundoApellido != null ?
                new ObjectParameter("segundoApellido", segundoApellido) :
                new ObjectParameter("segundoApellido", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var celularParameter = celular != null ?
                new ObjectParameter("celular", celular) :
                new ObjectParameter("celular", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var sexoParameter = sexo != null ?
                new ObjectParameter("sexo", sexo) :
                new ObjectParameter("sexo", typeof(string));
    
            var fechadeNacimientoParameter = fechadeNacimiento.HasValue ?
                new ObjectParameter("fechadeNacimiento", fechadeNacimiento) :
                new ObjectParameter("fechadeNacimiento", typeof(System.DateTime));
    
            var cargoParameter = cargo != null ?
                new ObjectParameter("cargo", cargo) :
                new ObjectParameter("cargo", typeof(string));
    
            var fechadeIngresoParameter = fechadeIngreso.HasValue ?
                new ObjectParameter("fechadeIngreso", fechadeIngreso) :
                new ObjectParameter("fechadeIngreso", typeof(System.DateTime));
    
            var disponibilidadParameter = disponibilidad != null ?
                new ObjectParameter("disponibilidad", disponibilidad) :
                new ObjectParameter("disponibilidad", typeof(string));
    
            var fechadeRetiroParameter = fechadeRetiro.HasValue ?
                new ObjectParameter("fechadeRetiro", fechadeRetiro) :
                new ObjectParameter("fechadeRetiro", typeof(System.DateTime));
    
            var observacionesParameter = observaciones != null ?
                new ObjectParameter("observaciones", observaciones) :
                new ObjectParameter("observaciones", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            var contratoParameter = contrato != null ?
                new ObjectParameter("Contrato", contrato) :
                new ObjectParameter("Contrato", typeof(string));
    
            var salarioParameter = salario.HasValue ?
                new ObjectParameter("Salario", salario) :
                new ObjectParameter("Salario", typeof(double));
    
            var epsParameter = eps != null ?
                new ObjectParameter("Eps", eps) :
                new ObjectParameter("Eps", typeof(string));
    
            var compensacionesParameter = compensaciones != null ?
                new ObjectParameter("compensaciones", compensaciones) :
                new ObjectParameter("compensaciones", typeof(string));
    
            var pensionesParameter = pensiones != null ?
                new ObjectParameter("Pensiones", pensiones) :
                new ObjectParameter("Pensiones", typeof(string));
    
            var aRPParameter = aRP != null ?
                new ObjectParameter("ARP", aRP) :
                new ObjectParameter("ARP", typeof(string));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GestionarEmpleado", cedulaParameter, primerNombreParameter, segundoNombreParameter, primerApellidoParameter, segundoApellidoParameter, telefonoParameter, celularParameter, direccionParameter, emailParameter, sexoParameter, fechadeNacimientoParameter, cargoParameter, fechadeIngresoParameter, disponibilidadParameter, fechadeRetiroParameter, observacionesParameter, estadoParameter, contratoParameter, salarioParameter, epsParameter, compensacionesParameter, pensionesParameter, aRPParameter, usuarioParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> MostrarCodigo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("MostrarCodigo");
        }
    
        public virtual ObjectResult<Nullable<int>> MostrarCodigoFactura()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("MostrarCodigoFactura");
        }
    
        public virtual ObjectResult<Loguin_Result> Loguin(string usuario, string contrasena)
        {
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("Contrasena", contrasena) :
                new ObjectParameter("Contrasena", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Loguin_Result>("Loguin", usuarioParameter, contrasenaParameter);
        }
    
        public virtual ObjectResult<BuscarMora_Result> BuscarMora(string cedula)
        {
            var cedulaParameter = cedula != null ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BuscarMora_Result>("BuscarMora", cedulaParameter);
        }
    
        public virtual ObjectResult<BuscarFacturaFechaCedula_Result> BuscarFacturaFechaCedula(string cedula, Nullable<System.DateTime> fechaInicial, Nullable<System.DateTime> fechaFinal)
        {
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var fechaInicialParameter = fechaInicial.HasValue ?
                new ObjectParameter("FechaInicial", fechaInicial) :
                new ObjectParameter("FechaInicial", typeof(System.DateTime));
    
            var fechaFinalParameter = fechaFinal.HasValue ?
                new ObjectParameter("FechaFinal", fechaFinal) :
                new ObjectParameter("FechaFinal", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BuscarFacturaFechaCedula_Result>("BuscarFacturaFechaCedula", cedulaParameter, fechaInicialParameter, fechaFinalParameter);
        }
    
        public virtual ObjectResult<BuscarOrdenFechaCedula_Result> BuscarOrdenFechaCedula(string cedula, Nullable<System.DateTime> fechaInicial, Nullable<System.DateTime> fechaFinal)
        {
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var fechaInicialParameter = fechaInicial.HasValue ?
                new ObjectParameter("FechaInicial", fechaInicial) :
                new ObjectParameter("FechaInicial", typeof(System.DateTime));
    
            var fechaFinalParameter = fechaFinal.HasValue ?
                new ObjectParameter("FechaFinal", fechaFinal) :
                new ObjectParameter("FechaFinal", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BuscarOrdenFechaCedula_Result>("BuscarOrdenFechaCedula", cedulaParameter, fechaInicialParameter, fechaFinalParameter);
        }
    
        public virtual ObjectResult<BuscarRemisionFechaCedula_Result> BuscarRemisionFechaCedula(string cedula, Nullable<System.DateTime> fechaInicial, Nullable<System.DateTime> fechaFinal)
        {
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var fechaInicialParameter = fechaInicial.HasValue ?
                new ObjectParameter("FechaInicial", fechaInicial) :
                new ObjectParameter("FechaInicial", typeof(System.DateTime));
    
            var fechaFinalParameter = fechaFinal.HasValue ?
                new ObjectParameter("FechaFinal", fechaFinal) :
                new ObjectParameter("FechaFinal", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BuscarRemisionFechaCedula_Result>("BuscarRemisionFechaCedula", cedulaParameter, fechaInicialParameter, fechaFinalParameter);
        }
    
        public virtual ObjectResult<string> RegistrarRemision(Nullable<int> numeroRemision, string ccNit, Nullable<System.DateTime> fechaVencimiento, string observaciones, Nullable<double> subtotal, Nullable<double> iva, Nullable<double> total, string usuario)
        {
            var numeroRemisionParameter = numeroRemision.HasValue ?
                new ObjectParameter("NumeroRemision", numeroRemision) :
                new ObjectParameter("NumeroRemision", typeof(int));
    
            var ccNitParameter = ccNit != null ?
                new ObjectParameter("CcNit", ccNit) :
                new ObjectParameter("CcNit", typeof(string));
    
            var fechaVencimientoParameter = fechaVencimiento.HasValue ?
                new ObjectParameter("fechaVencimiento", fechaVencimiento) :
                new ObjectParameter("fechaVencimiento", typeof(System.DateTime));
    
            var observacionesParameter = observaciones != null ?
                new ObjectParameter("Observaciones", observaciones) :
                new ObjectParameter("Observaciones", typeof(string));
    
            var subtotalParameter = subtotal.HasValue ?
                new ObjectParameter("Subtotal", subtotal) :
                new ObjectParameter("Subtotal", typeof(double));
    
            var ivaParameter = iva.HasValue ?
                new ObjectParameter("Iva", iva) :
                new ObjectParameter("Iva", typeof(double));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(double));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("RegistrarRemision", numeroRemisionParameter, ccNitParameter, fechaVencimientoParameter, observacionesParameter, subtotalParameter, ivaParameter, totalParameter, usuarioParameter);
        }
    
        public virtual ObjectResult<BuscarProveedor_Result> BuscarProveedor(Nullable<System.DateTime> fechaInicial, Nullable<System.DateTime> fechaFinal)
        {
            var fechaInicialParameter = fechaInicial.HasValue ?
                new ObjectParameter("FechaInicial", fechaInicial) :
                new ObjectParameter("FechaInicial", typeof(System.DateTime));
    
            var fechaFinalParameter = fechaFinal.HasValue ?
                new ObjectParameter("FechaFinal", fechaFinal) :
                new ObjectParameter("FechaFinal", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BuscarProveedor_Result>("BuscarProveedor", fechaInicialParameter, fechaFinalParameter);
        }
    
        public virtual ObjectResult<BuscClientes_Result> BuscClientes(Nullable<System.DateTime> fechaInicial, Nullable<System.DateTime> fechaFinal)
        {
            var fechaInicialParameter = fechaInicial.HasValue ?
                new ObjectParameter("FechaInicial", fechaInicial) :
                new ObjectParameter("FechaInicial", typeof(System.DateTime));
    
            var fechaFinalParameter = fechaFinal.HasValue ?
                new ObjectParameter("FechaFinal", fechaFinal) :
                new ObjectParameter("FechaFinal", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BuscClientes_Result>("BuscClientes", fechaInicialParameter, fechaFinalParameter);
        }
    
        public virtual ObjectResult<BuscaEmpleados_Result> BuscaEmpleados(Nullable<System.DateTime> fechaInicial, Nullable<System.DateTime> fechaFinal)
        {
            var fechaInicialParameter = fechaInicial.HasValue ?
                new ObjectParameter("FechaInicial", fechaInicial) :
                new ObjectParameter("FechaInicial", typeof(System.DateTime));
    
            var fechaFinalParameter = fechaFinal.HasValue ?
                new ObjectParameter("FechaFinal", fechaFinal) :
                new ObjectParameter("FechaFinal", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BuscaEmpleados_Result>("BuscaEmpleados", fechaInicialParameter, fechaFinalParameter);
        }
    
        public virtual ObjectResult<string> InhabilitarFactura(Nullable<int> numeroFactura, string estado, string mora)
        {
            var numeroFacturaParameter = numeroFactura.HasValue ?
                new ObjectParameter("NumeroFactura", numeroFactura) :
                new ObjectParameter("NumeroFactura", typeof(int));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            var moraParameter = mora != null ?
                new ObjectParameter("Mora", mora) :
                new ObjectParameter("Mora", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InhabilitarFactura", numeroFacturaParameter, estadoParameter, moraParameter);
        }
    
        public virtual ObjectResult<string> RegistrarFactura(Nullable<int> numeroFactura, Nullable<int> numeroOrden, string cedula, Nullable<System.DateTime> fechaVencimiento, string observaciones, Nullable<double> subtotal, Nullable<double> total, Nullable<double> valorIva, Nullable<double> descuento, Nullable<double> impuestos, string estado, string usuario, string mora, string estadoFact, Nullable<int> numeroRemision)
        {
            var numeroFacturaParameter = numeroFactura.HasValue ?
                new ObjectParameter("NumeroFactura", numeroFactura) :
                new ObjectParameter("NumeroFactura", typeof(int));
    
            var numeroOrdenParameter = numeroOrden.HasValue ?
                new ObjectParameter("NumeroOrden", numeroOrden) :
                new ObjectParameter("NumeroOrden", typeof(int));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(string));
    
            var fechaVencimientoParameter = fechaVencimiento.HasValue ?
                new ObjectParameter("FechaVencimiento", fechaVencimiento) :
                new ObjectParameter("FechaVencimiento", typeof(System.DateTime));
    
            var observacionesParameter = observaciones != null ?
                new ObjectParameter("Observaciones", observaciones) :
                new ObjectParameter("Observaciones", typeof(string));
    
            var subtotalParameter = subtotal.HasValue ?
                new ObjectParameter("Subtotal", subtotal) :
                new ObjectParameter("Subtotal", typeof(double));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(double));
    
            var valorIvaParameter = valorIva.HasValue ?
                new ObjectParameter("ValorIva", valorIva) :
                new ObjectParameter("ValorIva", typeof(double));
    
            var descuentoParameter = descuento.HasValue ?
                new ObjectParameter("Descuento", descuento) :
                new ObjectParameter("Descuento", typeof(double));
    
            var impuestosParameter = impuestos.HasValue ?
                new ObjectParameter("Impuestos", impuestos) :
                new ObjectParameter("Impuestos", typeof(double));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            var moraParameter = mora != null ?
                new ObjectParameter("Mora", mora) :
                new ObjectParameter("Mora", typeof(string));
    
            var estadoFactParameter = estadoFact != null ?
                new ObjectParameter("EstadoFact", estadoFact) :
                new ObjectParameter("EstadoFact", typeof(string));
    
            var numeroRemisionParameter = numeroRemision.HasValue ?
                new ObjectParameter("NumeroRemision", numeroRemision) :
                new ObjectParameter("NumeroRemision", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("RegistrarFactura", numeroFacturaParameter, numeroOrdenParameter, cedulaParameter, fechaVencimientoParameter, observacionesParameter, subtotalParameter, totalParameter, valorIvaParameter, descuentoParameter, impuestosParameter, estadoParameter, usuarioParameter, moraParameter, estadoFactParameter, numeroRemisionParameter);
        }
    
        public virtual ObjectResult<ReporteFactura_Result> ReporteFactura(Nullable<int> numeroFactura)
        {
            var numeroFacturaParameter = numeroFactura.HasValue ?
                new ObjectParameter("NumeroFactura", numeroFactura) :
                new ObjectParameter("NumeroFactura", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReporteFactura_Result>("ReporteFactura", numeroFacturaParameter);
        }
    
        public virtual ObjectResult<BuscarRemision_Result> BuscarRemision(Nullable<int> numeroRemision)
        {
            var numeroRemisionParameter = numeroRemision.HasValue ?
                new ObjectParameter("NumeroRemision", numeroRemision) :
                new ObjectParameter("NumeroRemision", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BuscarRemision_Result>("BuscarRemision", numeroRemisionParameter);
        }
    
        public virtual ObjectResult<BuscarNomCli_Result> BuscarNomCli(string nombre)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BuscarNomCli_Result>("BuscarNomCli", nombreParameter);
        }
    
        public virtual ObjectResult<MostrarDian_Result> MostrarDian()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MostrarDian_Result>("MostrarDian");
        }
    
        public virtual ObjectResult<string> RangoDian(Nullable<double> rangoInicial, Nullable<double> rangoFinal, string usuario, string resolucion)
        {
            var rangoInicialParameter = rangoInicial.HasValue ?
                new ObjectParameter("RangoInicial", rangoInicial) :
                new ObjectParameter("RangoInicial", typeof(double));
    
            var rangoFinalParameter = rangoFinal.HasValue ?
                new ObjectParameter("RangoFinal", rangoFinal) :
                new ObjectParameter("RangoFinal", typeof(double));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            var resolucionParameter = resolucion != null ?
                new ObjectParameter("Resolucion", resolucion) :
                new ObjectParameter("Resolucion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("RangoDian", rangoInicialParameter, rangoFinalParameter, usuarioParameter, resolucionParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> SeleccionarRango()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("SeleccionarRango");
        }
    }
}
